/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package libreria;

import java.awt.event.KeyEvent;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import java.awt.Desktop;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author MSI THIN GF63
 */
public class Ventas2 extends javax.swing.JFrame {
private int filaSeleccionada = -1;
    Connection conn;
    double Totalpagar = 0.00;
    /**
     * Creates new form Ventas2
     */
    public Ventas2() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.conn = conexion.getConnection();
        consultarDatos();
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // Método para generar el PDF del recibo
  public void generarReciboPDF(int idVenta) {
       try {
    // Configuración inicial
    java.util.Date date = new java.util.Date();
    String desktopPath = FileSystemView.getFileSystemView().getDefaultDirectory().getPath();
    File pdfFile = new File(desktopPath, "recibo_venta_" + idVenta + ".pdf");
    FileOutputStream archivo = new FileOutputStream(pdfFile);

    Document doc = new Document();
    PdfWriter.getInstance(doc, archivo);
    doc.open();

    // Agregar logo (modificar ruta según tu estructura)
    Image img = Image.getInstance(getClass().getResource("/imagenes/logo.png"));
    img.scaleToFit(100, 100);

    // Encabezado
    Paragraph fecha = new Paragraph();
    fecha.add(Chunk.NEWLINE);
    fecha.add("Fecha: " + new SimpleDateFormat("dd/MM/yyyy").format(date) + "\n\n");

    PdfPTable encabezado = new PdfPTable(2);
    encabezado.setWidthPercentage(100);
    encabezado.getDefaultCell().setBorder(0);

    encabezado.addCell(img);
    encabezado.addCell(new Paragraph("Recibo de Venta\nID Venta: " + idVenta, new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD)));
    doc.add(encabezado);
    doc.add(fecha);

    // Datos del cliente
    PdfPTable clienteTable = new PdfPTable(2);
    clienteTable.setWidthPercentage(100);
    clienteTable.getDefaultCell().setBorder(0);
    clienteTable.addCell(new Paragraph("Cliente:", new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD)));

    String clienteSQL = "SELECT c.nombre, c.correo_electronico FROM cliente c INNER JOIN ventas v ON c.id_cliente = v.id_cliente WHERE v.id_venta = ?";
    try (PreparedStatement ps = conn.prepareStatement(clienteSQL)) {
        ps.setInt(1, idVenta);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            clienteTable.addCell("Nombre: " + rs.getString("nombre") + "\nEmail: " + rs.getString("correo_electronico"));
        }
    }
    doc.add(clienteTable);

    // Detalle de venta desde TableVentas2
    PdfPTable detalleTable = new PdfPTable(TableVentas2.getColumnCount());
    detalleTable.setWidthPercentage(100);

    // Añadir encabezados
    for (int i = 0; i < TableVentas2.getColumnCount(); i++) {
        detalleTable.addCell(new Paragraph(TableVentas2.getColumnName(i), new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD)));
    }

    // Añadir filas
    for (int i = 0; i < TableVentas2.getRowCount(); i++) {
        for (int j = 0; j < TableVentas2.getColumnCount(); j++) {
            detalleTable.addCell(TableVentas2.getValueAt(i, j).toString());
        }
    }

    doc.add(detalleTable);

    // Total
    String totalSQL = "SELECT total FROM ventas WHERE id_venta = ?";
    try (PreparedStatement ps = conn.prepareStatement(totalSQL)) {
        ps.setInt(1, idVenta);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            Paragraph total = new Paragraph("Total a Pagar: $ " + String.format("%.2f", rs.getDouble("total")), new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD));
            total.setAlignment(Element.ALIGN_RIGHT);
            doc.add(total);
        }
    }

    doc.close();
    archivo.close();

    // Abrir el PDF automáticamente
    Desktop.getDesktop().open(pdfFile);

} catch (Exception e) {
    JOptionPane.showMessageDialog(this, "Error al generar el recibo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
}

    }
  public void enviarReciboPorCorreo(int idVenta, String destinatario, File archivoPDF) {
    // Configuración de las propiedades del servidor SMTP
    final String remitente = "libreriapaginasdoradas@gmail.com"; // Cambia esto por tu correo
    final String password = "ypub ndzv qqjh mjby"; // Cambia esto por tu contraseña
    String asunto = "Recibo de Venta ID: " + idVenta;
    String mensaje = "Estimado cliente,\n\nAdjunto encontrará el recibo de su compra.\n\nSaludos cordiales.";

    Properties props = new Properties();
    props.put("mail.smtp.host", "smtp.gmail.com"); // Servidor SMTP de Gmail
    props.put("mail.smtp.port", "587"); // Puerto para TLS
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.starttls.enable", "true");

    // Autenticación
    Session session = Session.getInstance(props, new javax.mail.Authenticator() {
        protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(remitente, password);
        }
    });

    try {
        // Crear el mensaje
        Message email = new MimeMessage(session);
        email.setFrom(new InternetAddress(remitente));
        email.setRecipients(Message.RecipientType.TO, InternetAddress.parse(destinatario));
        email.setSubject(asunto);

        // Crear el cuerpo del mensaje
        MimeBodyPart texto = new MimeBodyPart();
        texto.setText(mensaje);

        // Adjuntar el archivo PDF
        MimeBodyPart adjunto = new MimeBodyPart();
        DataSource source = new FileDataSource(archivoPDF);
        adjunto.setDataHandler(new DataHandler(source));
        adjunto.setFileName(archivoPDF.getName());

        // Combinar texto y archivo adjunto
        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(texto);
        multipart.addBodyPart(adjunto);

        email.setContent(multipart);

        // Enviar el mensaje
        Transport.send(email);

        JOptionPane.showMessageDialog(null, "Correo enviado exitosamente a " + destinatario);

    } catch (MessagingException e) {
        JOptionPane.showMessageDialog(null, "Error al enviar el correo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtStock = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNombreCliente = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableVentas2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        LabelTotal = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtisbn = new javax.swing.JTextField();
        txtTitulo = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Libros2 = new javax.swing.JTable();
        txtPrecio = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        idventa = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 102, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Stock disponible");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 460, 97, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("$");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 650, -1, -1));
        jPanel1.add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 490, 97, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Id del usuario");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 650, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Total a pagar");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 650, 82, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("ISBN");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 460, 37, -1));

        txtNombreCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreClienteActionPerformed(evt);
            }
        });
        jPanel1.add(txtNombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 670, 254, -1));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/salir_1.png"))); // NOI18N
        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 710, -1, -1));

        TableVentas2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] {
                "ISBN", "Descripcion", "Cantidad", "Precio", "Total"
            }
        )
    );
    jScrollPane1.setViewportView(TableVentas2);

    jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 950, 100));

    jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Carrito-de-compras.png"))); // NOI18N
    jButton1.setText("Realizar Venta");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });
    jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 650, -1, -1));

    LabelTotal.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
    jPanel1.add(LabelTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 650, 74, 20));

    jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
    jLabel6.setText("Precio");
    jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 460, 37, -1));
    jPanel1.add(txtisbn, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 490, 111, -1));
    jPanel1.add(txtTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 490, 216, -1));

    jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
    jLabel11.setText("Nombre del comprador");
    jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 650, -1, -1));

    txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            txtCantidadKeyPressed(evt);
        }
    });
    jPanel1.add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 490, 71, -1));

    jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
    jLabel5.setText("Cantidad");
    jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 460, -1, -1));

    jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
    jLabel2.setText("Libro seleccionado para venta");
    jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 420, -1, -1));

    jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
    jLabel4.setText("Descripcion");
    jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 460, 71, -1));

    Libros2.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
        },
        new String [] {
            "ID Libro", "ISBN", "Stoc", "Título", "Autor", "Editorial", "Categoría", 
            "No. Páginas", "Año de Publicación", "Idioma", "Precio de Referencia"
        }
    ));
    Libros2.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            Libros2MouseClicked(evt);
        }
    });
    jScrollPane2.setViewportView(Libros2);

    jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 950, 154));
    jPanel1.add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 490, 125, -1));

    jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/borrar.png"))); // NOI18N
    jButton2.setText("Deshacer venta");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });
    jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 650, -1, -1));

    idventa.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            idventaActionPerformed(evt);
        }
    });
    idventa.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            idventaKeyPressed(evt);
        }
    });
    jPanel1.add(idventa, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 670, 71, -1));

    jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
    jLabel1.setText("Libros Disponibles");
    jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 180, -1, -1));

    jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/encabezado.png"))); // NOI18N
    jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 170));

    jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
    jLabel13.setText("Correo del usuario:");
    jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 710, -1, -1));

    txtCorreo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtCorreoActionPerformed(evt);
        }
    });
    jPanel1.add(txtCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 710, 260, -1));

    jButton4.setText("¿No eres cliente aún?");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
        }
    });
    jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 720, -1, -1));

    getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1130, 790));

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Libros2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Libros2MouseClicked
        // TODO add your handling code here:
         // TODO add your handling code here:
        JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        int column = source.columnAtPoint(evt.getPoint());

        if (row >= 0 && column >= 0) {
        filaSeleccionada = row; // Almacena la fila seleccionada
    
    // Obtener los valores de la fila seleccionada
    String idLibro2 = source.getValueAt(row, 0).toString();  // id_libro
    String isbn2 = source.getValueAt(row, 1).toString();  // isbn
    String stock2 = source.getValueAt(row, 2).toString();  // no_de_serie
    String titulo2 = source.getValueAt(row, 3).toString();  // titulo
    String autor2 = source.getValueAt(row, 4).toString();  // autor
    String editorial2 = source.getValueAt(row, 5).toString();  // editorial
    String categoria2 = source.getValueAt(row, 6).toString();  // categoria
    String noPaginas2 = source.getValueAt(row, 7).toString();  // no_paginas
    String anioPublicacion2 = source.getValueAt(row, 8).toString();  // anio_de_publicacion
    String idioma2 = source.getValueAt(row, 9).toString();  // idioma
    String precioReferencia2 = source.getValueAt(row, 10).toString();  // precio_referencia
    
    // Mostrar los valores de la fila seleccionada en los JTextField
    
    txtisbn.setText(isbn2);
    txtStock.setText(stock2);
    txtTitulo.setText(titulo2);
    txtPrecio.setText(precioReferencia2);
        }
    }//GEN-LAST:event_Libros2MouseClicked

    private void txtCantidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyPressed
        // TODO add your handling code here:                                     
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        // Verifica que el campo txtCantidad no esté vacío
        String cantidadTexto = txtCantidad.getText().trim();
        if (cantidadTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa una cantidad.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Intenta convertir el texto a un número entero
        int cant;
        try {
            cant = Integer.parseInt(cantidadTexto);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String isbn = txtisbn.getText().trim();
        String descripcion = txtTitulo.getText().trim();
        double precio;
        int stock;

        try {
            precio = Double.parseDouble(txtPrecio.getText().trim());
            stock = Integer.parseInt(txtStock.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error en los datos ingresados. Verifica el precio o stock.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (stock < cant) {
            JOptionPane.showMessageDialog(this, "Stock no disponible.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtén el modelo actual de la tabla
        DefaultTableModel modelo = (DefaultTableModel) TableVentas2.getModel();

        // Verifica si el ISBN ya está en la tabla
        boolean encontrado = false;
        for (int i = 0; i < modelo.getRowCount(); i++) {
            String isbnEnTabla = modelo.getValueAt(i, 0).toString();
            if (isbnEnTabla.equals(isbn)) {
                // Si el ISBN ya existe, actualiza la cantidad y el total
                int cantidadActual = Integer.parseInt(modelo.getValueAt(i, 2).toString());
                double totalActual = Double.parseDouble(modelo.getValueAt(i, 4).toString());

                // Actualiza la cantidad y el total
                int nuevaCantidad = cantidadActual + cant;
                double nuevoTotal = nuevaCantidad * precio;

                modelo.setValueAt(nuevaCantidad, i, 2);
                modelo.setValueAt(nuevoTotal, i, 4);

                encontrado = true;
                break;
            }
        }

        if (!encontrado) {
            // Si el ISBN no existe, agrega una nueva fila
            double total = cant * precio;
            modelo.addRow(new Object[]{isbn, descripcion, cant, precio, total});
        }

        // Reduce el stock disponible
        txtStock.setText(String.valueOf(stock - cant));

        // Actualiza el total a pagar
        Totalpagar();
        LimpiarVenta();
    }
    }//GEN-LAST:event_txtCantidadKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo = (DefaultTableModel) TableVentas2.getModel();
        modelo.removeRow(TableVentas2.getSelectedRow());
        txtCantidad.setText("");
        txtStock.setText(""); 
        txtTitulo.setText("");
        txtPrecio.setText("");
        Totalpagar();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    DefaultTableModel modelo = (DefaultTableModel) TableVentas2.getModel();
    if (modelo.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "No hay productos en la venta para guardar.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String idClienteInput = idventa.getText().trim();
    if (idClienteInput.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de cliente.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        int idCliente = Integer.parseInt(idClienteInput);
        double totalVenta = 0.0;
        int idVenta = 0; // Variable para almacenar el ID de la venta recién registrada

        // Iniciar transacción
        conn.setAutoCommit(false);

        for (int i = 0; i < modelo.getRowCount(); i++) {
            String isbn = (String) modelo.getValueAt(i, 0); // ISBN en la columna 0
            int cantidad = Integer.parseInt(modelo.getValueAt(i, 2).toString()); // Cantidad en la columna 2
            double totalFila = Double.parseDouble(modelo.getValueAt(i, 4).toString()); // Total en la columna 4

            // Acumular el total de la venta
            totalVenta += totalFila;

            // Verificar stock actual
            String sqlVerificarStock = "SELECT stock FROM libros WHERE isbn = ?";
            try (PreparedStatement pstmtVerificarStock = conn.prepareStatement(sqlVerificarStock)) {
                pstmtVerificarStock.setString(1, isbn);
                ResultSet rs = pstmtVerificarStock.executeQuery();
                if (rs.next()) {
                    int stockActual = rs.getInt("stock");
                    if (stockActual < cantidad) {
                        conn.rollback(); // Revertir transacción en caso de error
                        JOptionPane.showMessageDialog(this, "Stock insuficiente para el libro con ISBN: " + isbn, "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                rs.close();
            }

            // Actualizar stock en la base de datos
            String sqlActualizarStock = "UPDATE libros SET stock = stock - ? WHERE isbn = ?";
            try (PreparedStatement pstmtActualizarStock = conn.prepareStatement(sqlActualizarStock)) {
                pstmtActualizarStock.setInt(1, cantidad);
                pstmtActualizarStock.setString(2, isbn);
                pstmtActualizarStock.executeUpdate();
            }
        }

        // Registrar la venta en la tabla ventas
        String sqlVenta = "INSERT INTO ventas (fecha_venta, id_cliente, total) VALUES (?, ?, ?)";
        try (PreparedStatement pstmtVenta = conn.prepareStatement(sqlVenta, Statement.RETURN_GENERATED_KEYS)) {
            pstmtVenta.setTimestamp(1, new java.sql.Timestamp(System.currentTimeMillis()));
            pstmtVenta.setInt(2, idCliente);
            pstmtVenta.setDouble(3, totalVenta);
            pstmtVenta.executeUpdate();

            // Obtener el ID de la venta recién registrada
            ResultSet rs = pstmtVenta.getGeneratedKeys();
            if (rs.next()) {
                idVenta = rs.getInt(1);
            }
        }

        // Confirmar la transacción
        conn.commit();
        JOptionPane.showMessageDialog(this, "Venta guardada con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        // Generar el recibo en PDF
        generarReciboPDF(idVenta);

        // Obtener el correo electrónico del cliente
        String correoCliente = null;
        String sqlObtenerCorreo = "SELECT correo_electronico FROM cliente WHERE id_cliente = ?";
        try (PreparedStatement psCorreo = conn.prepareStatement(sqlObtenerCorreo)) {
            psCorreo.setInt(1, idCliente);
            ResultSet rsCorreo = psCorreo.executeQuery();
            if (rsCorreo.next()) {
                correoCliente = rsCorreo.getString("correo_electronico");
            }
        }

        // Verificar si se obtuvo el correo del cliente
        if (correoCliente != null && !correoCliente.isEmpty()) {
            // Ruta del archivo PDF generado
            String desktopPath = FileSystemView.getFileSystemView().getDefaultDirectory().getPath();
            File archivoPDF = new File(desktopPath, "recibo_venta_" + idVenta + ".pdf");

            // Enviar recibo por correo
            enviarReciboPorCorreo(idVenta, correoCliente, archivoPDF);
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo obtener el correo del cliente. El recibo no fue enviado.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

        // Limpiar tabla y campos
        actualizarTabla();
        LimpiarVenta();
        LimpiarUsuario();
        modelo.setRowCount(0);

    } catch (SQLException ex) {
        try {
            conn.rollback(); // Revertir cambios en caso de error
        } catch (SQLException rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(this, "Error al guardar la venta: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Error en los datos ingresados. Verifica los datos de la venta.", "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            conn.setAutoCommit(true); // Restaurar configuración de auto-commit
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void idventaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idventaKeyPressed
        // TODO add your handling code here:
         // Capturar la tecla presionada
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) { // Verifica si la tecla presionada es "Enter"
        String idClienteInput = idventa.getText().trim(); // Asume que "idventa" es un JTextField

        if (!idClienteInput.isEmpty()) {
            try {
                // Consulta para obtener el ID del cliente y su nombre
                String sql = "SELECT id_cliente, nombre,apellidos,correo_electronico FROM cliente WHERE id_cliente = ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, Integer.parseInt(idClienteInput)); // Asegúrate de que el ID es un número

                ResultSet rs = pstmt.executeQuery();

                if (rs.next()) {
                    int idUsuario = rs.getInt("id_cliente");
                    String nombre = rs.getString("nombre");
                    String apellidos = rs.getString("apellidos");
                    String correo = rs.getString("correo_electronico");

                    // Mostrar el ID en idventa y el nombre en txtNombreCliente
                    idventa.setText(String.valueOf(idUsuario));
                    txtNombreCliente.setText(nombre + " " + apellidos);
                    txtCorreo.setText(correo);

                } else {
                    JOptionPane.showMessageDialog(null, "Cliente no encontrado.");
                    idventa.setText(""); // Limpiar el campo de ID de cliente
                    txtNombreCliente.setText(""); // Limpiar el campo de nombre
                    txtCorreo.setText("");
                }

                rs.close();
                pstmt.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error al buscar el cliente: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese un ID válido.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese un ID de cliente.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }
    }//GEN-LAST:event_idventaKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtNombreClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreClienteActionPerformed

    private void idventaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idventaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idventaActionPerformed

    private void txtCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCorreoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCorreoActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        Registrocliente r1 = new Registrocliente();
        r1.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void consultarDatos() {
    try {
        // Actualiza la consulta SQL con los nuevos campos
        String sql = "SELECT id_libro, isbn, stock, titulo, autor, editorial, categoria, no_paginas, anio_de_publicacion, idioma, precio_referencia FROM libros";
        PreparedStatement pstmt = conn.prepareStatement(sql);
        ResultSet rs = pstmt.executeQuery();

        // Obtén el modelo de la tabla para actualizar los datos
        DefaultTableModel model = (DefaultTableModel) Libros2.getModel();
        model.setRowCount(0); // Limpiar la tabla antes de agregar nuevos datos

        // Recorre los resultados y agrega las filas a la tabla
        while (rs.next()) {
            // Extrae los valores de cada columna
            int idLibro = rs.getInt("id_libro");
            String isbn = rs.getString("isbn");
            int stock = rs.getInt("stock");
            String titulo = rs.getString("titulo");
            String autor = rs.getString("autor");
            String editorial = rs.getString("editorial");
            String categoria = rs.getString("categoria");
            int noPaginas = rs.getInt("no_paginas");
            int anioDePublicacion = rs.getInt("anio_de_publicacion");
            String idioma = rs.getString("idioma");
            double precioReferencia = rs.getDouble("precio_referencia");

            // Agrega la fila con los datos a la tabla
            model.addRow(new Object[]{idLibro, isbn, stock, titulo, autor, editorial, categoria, noPaginas, anioDePublicacion, idioma, precioReferencia});
        }
        rs.close();
        pstmt.close();
    } catch (SQLException ex) {
        // Manejo de excepciones, por ejemplo, mostrar un mensaje de error
        System.err.println("Error: " + ex.getMessage());
    }
}
    
private void actualizarTabla() {
    DefaultTableModel modelo = (DefaultTableModel) Libros2.getModel();
    modelo.setRowCount(0); // Limpiar la tabla actual

    String sql = "SELECT * FROM libros";  // Consulta SQL para obtener todos los libros
    try (PreparedStatement stmt = conn.prepareStatement(sql); ResultSet rs = stmt.executeQuery()) {
        while (rs.next()) {
            // Recuperar los datos de cada libro
            int idLibro = rs.getInt("id_libro");
            String isbn = rs.getString("isbn");
            int stock = rs.getInt("stock");
            String titulo = rs.getString("titulo");
            String autor = rs.getString("autor");
            String editorial = rs.getString("editorial");
            String categoria = rs.getString("categoria");
            int noPaginas = rs.getInt("no_paginas");
            int anioDePublicacion = rs.getInt("anio_de_publicacion");
            String idioma = rs.getString("idioma");
            double precioReferencia = rs.getDouble("precio_referencia");

            // Agregar una fila con los datos del libro
            modelo.addRow(new Object[]{idLibro,isbn, stock, titulo, autor, editorial, categoria, noPaginas, anioDePublicacion, idioma, precioReferencia});
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al actualizar la tabla: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    
private void limpiarCamposBusqueda() {
        txtisbn.setText("");
        txtTitulo.setText("");
        txtCantidad.setText("");
        txtPrecio.setText("");
        txtStock.setText("");
    }

private void Totalpagar() {
    Totalpagar = 0.00;
    int numFila = TableVentas2.getRowCount();
    for (int i = 0; i < numFila; i++) {
        Object valor = TableVentas2.getModel().getValueAt(i, 4);
        double cal = 0.0;

        if (valor != null) {
            try {
                cal = Double.parseDouble(String.valueOf(valor));
            } catch (NumberFormatException e) {
                // Maneja el error si es necesario, por ejemplo, puedes imprimirlo
                System.out.println("Error al convertir a double: " + e.getMessage());
            }
        }
        Totalpagar += cal;
    }
    LabelTotal.setText(String.format("%,.2f", Totalpagar));
}

private void LimpiarVenta() {
    txtisbn.setText("");
    txtTitulo.setText("");
    txtCantidad.setText("");
    txtPrecio.setText("");
    txtStock.setText("");
}
private void LimpiarUsuario() {
    idventa.setText("");
    txtNombreCliente.setText("");
    txtCorreo.setText("");
    
}
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventas2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventas2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventas2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventas2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventas2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelTotal;
    private javax.swing.JTable Libros2;
    private javax.swing.JTable TableVentas2;
    private javax.swing.JTextField idventa;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtNombreCliente;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    private javax.swing.JTextField txtTitulo;
    private javax.swing.JTextField txtisbn;
    // End of variables declaration//GEN-END:variables
}
